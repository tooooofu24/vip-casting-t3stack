// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../src/lib/prisma/generated"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Industry {
    RETAIL
    MANUFACTURING
    SERVICE
    IT
    FINANCE
    REAL_ESTATE
    FOOD
    ENTERTAINMENT
    OTHER
}

enum Prefecture {
    HOKKAIDO
    AOMORI
    IWATE
    MIYAGI
    AKITA
    YAMAGATA
    FUKUSHIMA
    IBARAKI
    TOCHIGI
    GUNMA
    SAITAMA
    CHIBA
    TOKYO
    KANAGAWA
    NIIGATA
    TOYAMA
    ISHIKAWA
    FUKUI
    YAMANASHI
    NAGANO
    GIFU
    SHIZUOKA
    AICHI
    MIE
    SHIGA
    KYOTO
    OSAKA
    HYOGO
    NARA
    WAKAYAMA
    TOTTORI
    SHIMANE
    OKAYAMA
    HIROSHIMA
    YAMAGUCHI
    TOKUSHIMA
    KAGAWA
    EHIME
    KOCHI
    FUKUOKA
    SAGA
    NAGASAKI
    KUMAMOTO
    OITA
    MIYAZAKI
    KAGOSHIMA
    OKINAWA
}

enum AgeGroup {
    TEENS
    EARLY_20S
    LATE_20S
    EARLY_30S
    LATE_30S
    OVER_40S
}

enum Region {
    ALL
    KANTO
    KANSAI
    TOKAI
    HOKKAIDO
    TOHOKU
    CHUGOKU
    SHIKOKU
    KYUSHU
    ONLINE
}

enum Genre {
    BEAUTY
    FASHION
    FOOD
    TECH
    LIFESTYLE
    TRAVEL
    FITNESS
    ENTERTAINMENT
}

enum Objective {
    AWARENESS
    SALES
    BRAND
    ENGAGEMENT
    LEADS
    SERVICE
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum WorkType {
    POST
    VIDEO
    LIVE
    EVENT
    AMBASSADOR
    MODEL
    REVIEW
}

model Company {
    id         String   @id @default(uuid()) @db.Uuid
    createdAt  DateTime @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime @updatedAt @db.Timestamptz(6)
    isApproved Boolean  @default(false)

    information CompanyInformation?
    address     CompanyAddress?
    business    CompanyBusiness?
    payment     CompanyPayment?
}

model CompanyInformation {
    id                String   @id @default(uuid()) @db.Uuid
    companyId         String   @unique @db.Uuid
    companyName       String   @db.VarChar(255)
    displayName       String   @db.VarChar(255)
    corporateNumber   String   @db.VarChar(13)
    ceoName           String   @db.VarChar(100)
    establishedAt     DateTime
    capital           Int
    numberOfEmployees Int
    industry          Industry
    websiteUrl        String   @db.VarChar(255)
    purpose           String?  @db.Text
    note              String?  @db.Text
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CompanyAddress {
    id         String     @id @default(uuid()) @db.Uuid
    companyId  String     @unique @db.Uuid
    postalCode String     @db.VarChar(7)
    prefecture Prefecture
    city       String     @db.VarChar(255)
    town       String     @db.VarChar(255)
    street     String     @db.VarChar(255)
    building   String?    @db.VarChar(100)
    createdAt  DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime   @updatedAt @db.Timestamptz(6)

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CompanyBusiness {
    id                 String   @id @default(uuid()) @db.Uuid
    companyId          String   @unique @db.Uuid
    contactName        String   @db.VarChar(100)
    department         String   @db.VarChar(100)
    position           String?  @db.VarChar(100)
    phone              String?  @db.VarChar(20)
    email              String   @db.VarChar(255)
    minBudget          Int
    maxBudget          Int
    gender             Gender
    pastExperience     String?  @db.Text
    productDescription String?  @db.Text
    createdAt          DateTime @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime @updatedAt @db.Timestamptz(6)

    // --- リレーション ---
    company    Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
    ageGroups  CompanyBusinessAgeGroup[]
    regions    CompanyBusinessRegion[]
    genres     CompanyBusinessGenre[]
    objectives CompanyBusinessObjective[]
}

model CompanyBusinessAgeGroup {
    id                String   @id @default(uuid()) @db.Uuid
    companyBusinessId String   @db.Uuid
    ageGroup          AgeGroup
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, ageGroup])
    @@index([companyBusinessId])
}

model CompanyBusinessRegion {
    id                String   @id @default(uuid()) @db.Uuid
    companyBusinessId String   @db.Uuid
    region            Region
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, region])
    @@index([companyBusinessId])
}

model CompanyBusinessGenre {
    id                String   @id @default(uuid()) @db.Uuid
    companyBusinessId String   @db.Uuid
    genre             Genre
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, genre])
    @@index([companyBusinessId])
}

model CompanyBusinessObjective {
    id                String    @id @default(uuid()) @db.Uuid
    companyBusinessId String    @db.Uuid
    objective         Objective
    createdAt         DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime  @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, objective])
    @@index([companyBusinessId])
}

model CompanyPayment {
    id                 String     @id @default(uuid()) @db.Uuid
    companyId          String     @unique @db.Uuid
    bankName           String     @db.VarChar(100)
    branchName         String     @db.VarChar(100)
    accountType        String     @db.VarChar(20)
    accountNumber      String     @db.VarChar(20)
    accountHolder      String     @db.VarChar(100)
    billingPostalCode  String     @db.VarChar(7)
    billingPrefecture  Prefecture
    billingCity        String     @db.VarChar(100)
    billingAddress     String     @db.VarChar(255)
    billingBuilding    String?    @db.VarChar(100)
    billingContactName String     @db.VarChar(100)
    createdAt          DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime   @updatedAt @db.Timestamptz(6)

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Influencer {
    id         String   @id @default(uuid()) @db.Uuid
    createdAt  DateTime @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime @updatedAt @db.Timestamptz(6)
    isApproved Boolean  @default(false)

    information InfluencerInformation?
    address     InfluencerAddress?
    sns         InfluencerSns?
    work        InfluencerWork?
}

model InfluencerInformation {
    id            String   @id @default(uuid()) @db.Uuid
    influencerId  String   @unique @db.Uuid
    displayName   String   @db.VarChar(255)
    email         String   @db.VarChar(255)
    lastName      String   @db.VarChar(100)
    firstName     String   @db.VarChar(100)
    lastNameKana  String   @db.VarChar(100)
    firstNameKana String   @db.VarChar(100)
    birthday      DateTime
    gender        Gender
    phone         String   @db.VarChar(20)
    createdAt     DateTime @default(now()) @db.Timestamptz(6)
    updatedAt     DateTime @updatedAt @db.Timestamptz(6)

    influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

model InfluencerAddress {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @unique @db.Uuid
    postalCode   String     @db.VarChar(7)
    prefecture   Prefecture
    city         String     @db.VarChar(255)
    town         String     @db.VarChar(255)
    street       String     @db.VarChar(255)
    building     String?    @db.VarChar(100)
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

model InfluencerSns {
    id                 String   @id @default(uuid()) @db.Uuid
    influencerId       String   @unique @db.Uuid
    instagramName      String?  @db.VarChar(255)
    instagramFollowers Int?
    youtubeName        String?  @db.VarChar(255)
    youtubeFollowers   Int?
    tiktokName         String?  @db.VarChar(255)
    tiktokFollowers    Int?
    xName              String?  @db.VarChar(255)
    xFollowers         Int?
    createdAt          DateTime @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime @updatedAt @db.Timestamptz(6)

    influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

model InfluencerWork {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @unique @db.Uuid
    postFee      Int?
    videoFee     Int?
    liveFee      Int?
    eventFee     Int?
    workTypes    WorkType[]
    regions      Region[]
    ngProducts   String[]
    ngCompanies  String[]
    ngOther      String?
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    influencer Influencer           @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    prResults  InfluencerPrResult[]
}

model InfluencerPrResult {
    id               String   @id @default(uuid()) @db.Uuid
    influencerWorkId String   @db.Uuid
    company          String   @db.VarChar(255)
    content          String   @db.Text
    year             String   @db.VarChar(4)
    month            String   @db.VarChar(2)
    createdAt        DateTime @default(now()) @db.Timestamptz(6)
    updatedAt        DateTime @updatedAt @db.Timestamptz(6)

    work InfluencerWork @relation(fields: [influencerWorkId], references: [id], onDelete: Cascade)

    @@index([influencerWorkId])
}
