// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

enum UserRole {
    USER
    INFLUENCER
    COMPANY
}

enum Gender {
    UNSPECIFIED
    MALE
    FEMALE
    OTHER
}

enum AccountType {
    SAVINGS
    CHECKING
}

enum CampaignStatus {
    DRAFT // 下書き
    IN_PROGRESS // 進行中
    PENDING // 確認待ち
    COMPLETED // 完了
    CANCELLED // キャンセル
}

enum ApplicationStatus {
    PENDING
    APPROVED
    REJECTED
}

enum SnsType {
    INSTAGRAM
    TIKTOK
    YOUTUBE
    TWITTER
}

enum Industry {
    RETAIL
    MANUFACTURING
    SERVICE
    IT
    FINANCE
    REAL_ESTATE
    FOOD
    ENTERTAINMENT
    OTHER
}

enum Prefecture {
    HOKKAIDO
    AOMORI
    IWATE
    MIYAGI
    AKITA
    YAMAGATA
    FUKUSHIMA
    IBARAKI
    TOCHIGI
    GUNMA
    SAITAMA
    CHIBA
    TOKYO
    KANAGAWA
    NIIGATA
    TOYAMA
    ISHIKAWA
    FUKUI
    YAMANASHI
    NAGANO
    GIFU
    SHIZUOKA
    AICHI
    MIE
    SHIGA
    KYOTO
    OSAKA
    HYOGO
    NARA
    WAKAYAMA
    TOTTORI
    SHIMANE
    OKAYAMA
    HIROSHIMA
    YAMAGUCHI
    TOKUSHIMA
    KAGAWA
    EHIME
    KOCHI
    FUKUOKA
    SAGA
    NAGASAKI
    KUMAMOTO
    OITA
    MIYAZAKI
    KAGOSHIMA
    OKINAWA
}

enum AgeGroup {
    TEENS
    EARLY_20S
    LATE_20S
    EARLY_30S
    LATE_30S
    OVER_40S
}

enum Region {
    ALL
    KANTO
    KANSAI
    TOKAI
    HOKKAIDO
    TOHOKU
    CHUGOKU
    SHIKOKU
    KYUSHU
}

enum Genre {
    BEAUTY
    FASHION
    FOOD
    TECH
    LIFESTYLE
    TRAVEL
    FITNESS
    ENTERTAINMENT
}

enum Objective {
    AWARENESS
    SALES
    BRAND
    ENGAGEMENT
    LEADS
    SERVICE
}

model User {
    id         String      @id @default(uuid()) @db.Uuid
    email      String      @unique @db.VarChar(255)
    password   String      @db.VarChar(255)
    name       String?     @db.VarChar(100)
    createdAt  DateTime    @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime    @updatedAt @db.Timestamptz(6)
    role       UserRole    @default(USER)
    influencer Influencer?
    company    Company?    @relation(fields: [companyId], references: [id])
    companyId  String?     @db.Uuid

    @@index([email])
}

model Influencer {
    id                     String            @id @default(uuid()) @db.Uuid
    userId                 String            @unique @db.Uuid
    user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    nickname               String?           @db.VarChar(100)
    familyName             String?           @db.VarChar(50)
    givenName              String?           @db.VarChar(50)
    familyNameKana         String?           @db.VarChar(50)
    givenNameKana          String?           @db.VarChar(50)
    birthday               DateTime?         @db.Date
    sex                    Gender?
    phoneNumber            String?           @db.VarChar(20)
    postCode               String?           @db.VarChar(7)
    prefecture             Prefecture?
    address                String?           @db.VarChar(255)
    roomNumber             String?           @db.VarChar(50)
    selfPr                 String?           @db.Text
    requestedRewardByPost  Int?              @db.Integer
    requestedRewardByVideo Int?              @db.Integer
    requestedRewardByLive  Int?              @db.Integer
    requestedRewardByEvent Int?              @db.Integer
    ngProducts             String?           @db.Text
    ngCompanies            String?           @db.Text
    ngOthers               String?           @db.Text
    createdAt              DateTime          @default(now()) @db.Timestamptz(6)
    updatedAt              DateTime          @updatedAt @db.Timestamptz(6)
    applications           Application[]
    specialityFields       SpecialityField[]
    prHistories            PrHistory[]
    snsAccounts            SnsAccount[]
    handlableCases         HandlableCase[]
    activeAreas            ActiveArea[]

    @@index([userId])
}

model SpecialityField {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @db.Uuid
    influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    field        String     @db.VarChar(100)
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    @@index([influencerId])
}

model PrHistory {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @db.Uuid
    influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    history      String     @db.Text
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    @@index([influencerId])
}

model SnsAccount {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @db.Uuid
    influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    snsType      SnsType
    accountName  String     @db.VarChar(100)
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    @@index([influencerId])
    @@index([snsType])
}

model HandlableCase {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @db.Uuid
    influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    caseType     String     @db.VarChar(50)
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    @@index([influencerId])
}

model ActiveArea {
    id           String     @id @default(uuid()) @db.Uuid
    influencerId String     @db.Uuid
    influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    area         String     @db.VarChar(50)
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

    @@index([influencerId])
    @@index([area])
}

model Company {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    information CompanyInformation?
    address     CompanyAddress?
    business    CompanyBusiness?
    payment     CompanyPayment?
    campaigns   Campaign[]
    User        User[]
}

model CompanyInformation {
    id                String   @id @default(uuid()) @db.Uuid
    companyId         String   @unique @db.Uuid
    companyName       String   @db.VarChar(255)
    displayName       String   @db.VarChar(255)
    corporateNumber   String   @db.VarChar(13)
    ceoName           String   @db.VarChar(100)
    establishedAt     DateTime
    capital           Int
    numberOfEmployees Int
    industry          Industry
    websiteUrl        String   @db.VarChar(255)
    purpose           String?  @db.Text
    note              String?  @db.Text
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CompanyAddress {
    id         String     @id @default(uuid()) @db.Uuid
    companyId  String     @unique @db.Uuid
    postalCode String     @db.VarChar(7)
    prefecture Prefecture
    city       String     @db.VarChar(255)
    town       String     @db.VarChar(255)
    street     String     @db.VarChar(255)
    building   String?    @db.VarChar(100)
    createdAt  DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime   @updatedAt @db.Timestamptz(6)

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CompanyBusiness {
    id                 String   @id @default(uuid()) @db.Uuid
    companyId          String   @unique @db.Uuid
    contactName        String   @db.VarChar(100)
    department         String   @db.VarChar(100)
    position           String?  @db.VarChar(100)
    phone              String?  @db.VarChar(20)
    email              String   @db.VarChar(255)
    minBudget          Int
    maxBudget          Int
    gender             String   @db.VarChar(10)
    pastExperience     String?  @db.Text
    productDescription String?  @db.Text
    createdAt          DateTime @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime @updatedAt @db.Timestamptz(6)

    // --- リレーション ---
    company    Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
    ageGroups  CompanyBusinessAgeGroup[]
    regions    CompanyBusinessRegion[]
    genres     CompanyBusinessGenre[]
    objectives CompanyBusinessObjective[]
}

model CompanyBusinessAgeGroup {
    id                String   @id @default(uuid()) @db.Uuid
    companyBusinessId String   @db.Uuid
    ageGroup          AgeGroup
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, ageGroup])
    @@index([companyBusinessId])
}

model CompanyBusinessRegion {
    id                String   @id @default(uuid()) @db.Uuid
    companyBusinessId String   @db.Uuid
    region            Region
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, region])
    @@index([companyBusinessId])
}

model CompanyBusinessGenre {
    id                String   @id @default(uuid()) @db.Uuid
    companyBusinessId String   @db.Uuid
    genre             Genre
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, genre])
    @@index([companyBusinessId])
}

model CompanyBusinessObjective {
    id                String    @id @default(uuid()) @db.Uuid
    companyBusinessId String    @db.Uuid
    objective         Objective
    createdAt         DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime  @updatedAt @db.Timestamptz(6)

    companyBusiness CompanyBusiness @relation(fields: [companyBusinessId], references: [id], onDelete: Cascade)

    @@unique([companyBusinessId, objective])
    @@index([companyBusinessId])
}

model CompanyPayment {
    id                 String     @id @default(uuid()) @db.Uuid
    companyId          String     @unique @db.Uuid
    bankName           String     @db.VarChar(100)
    branchName         String     @db.VarChar(100)
    accountType        String     @db.VarChar(20)
    accountNumber      String     @db.VarChar(20)
    accountHolder      String     @db.VarChar(100)
    billingPostalCode  String     @db.VarChar(7)
    billingPrefecture  Prefecture
    billingCity        String     @db.VarChar(100)
    billingAddress     String     @db.VarChar(255)
    billingBuilding    String?    @db.VarChar(100)
    billingContactName String     @db.VarChar(100)
    createdAt          DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime   @updatedAt @db.Timestamptz(6)

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Campaign {
    id            String         @id @default(uuid()) @db.Uuid
    companyId     String         @db.Uuid
    company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
    title         String         @db.VarChar(255)
    platform      String         @db.VarChar(50)
    genre         String         @db.VarChar(50)
    image         String         @db.VarChar(255)
    followers     Int            @db.Integer
    deadline      DateTime       @db.Timestamptz(6)
    draftDeadline DateTime?      @db.Timestamptz(6)
    requiresDraft Boolean        @default(false)
    budgetFrom    Int            @db.Integer
    budgetTo      Int            @db.Integer
    isVip         Boolean        @default(false)
    status        CampaignStatus @default(DRAFT)
    Application   Application[]

    @@index([companyId])
    @@index([platform])
    @@index([genre])
    @@index([status])
}

model Application {
    id           String            @id @default(uuid()) @db.Uuid
    influencerId String            @db.Uuid
    influencer   Influencer        @relation(fields: [influencerId], references: [id], onDelete: Cascade)
    campaignId   String            @db.Uuid
    campaign     Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    status       ApplicationStatus @default(PENDING)
    message      String?           @db.Text
    createdAt    DateTime          @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime          @updatedAt @db.Timestamptz(6)

    @@index([influencerId])
    @@index([campaignId])
    @@index([status])
}
